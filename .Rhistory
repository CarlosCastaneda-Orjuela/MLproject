message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinv(m)
m
}
# Creates the matrix
makeCacheMatrix <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(solve) m <<- solve
getin <- function() m
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
# calculates the mean of the special "vector" created with the above function.
# it first checks to see if the mean has already been calculated.
# If so, it gets the mean from the cache and skips the computation.
# Otherwise, it calculates the mean of the data and sets the value of the mean in the cache via the setmean function
cacheSolve <- function(x, ...) {
m <- x$getinv()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinv(m)
m
}
# Creates the matrix
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(solve) m <<- solve
getin <- function() m
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
# calculates the mean of the special "vector" created with the above function.
# it first checks to see if the mean has already been calculated.
# If so, it gets the mean from the cache and skips the computation.
# Otherwise, it calculates the mean of the data and sets the value of the mean in the cache via the setmean function
cacheSolve <- function(x, ...) {
m <- x$getinv()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinv(m)
m
}
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
# Creates the matrix
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(solve) m <<- solve
getinv <- function() m
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
# calculates the mean of the special "vector" created with the above function.
# it first checks to see if the mean has already been calculated.
# If so, it gets the mean from the cache and skips the computation.
# Otherwise, it calculates the mean of the data and sets the value of the mean in the cache via the setmean function
cacheSolve <- function(x, ...) {
m <- x$getinv()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinv(m)
m
}
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
amatrix$getinverse()
# Creates the matrix
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverese <- function(solve) m <<- solve
getinvinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
# calculates the mean of the special "vector" created with the above function.
# it first checks to see if the mean has already been calculated.
# If so, it gets the mean from the cache and skips the computation.
# Otherwise, it calculates the mean of the data and sets the value of the mean in the cache via the setmean function
cacheSolve <- function(x, ...) {
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
# Creates the matrix
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinvinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
# calculates the mean of the special "vector" created with the above function.
# it first checks to see if the mean has already been calculated.
# If so, it gets the mean from the cache and skips the computation.
# Otherwise, it calculates the mean of the data and sets the value of the mean in the cache via the setmean function
cacheSolve <- function(x, ...) {
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
# Creates the matrix
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
# calculates the mean of the special "vector" created with the above function.
# it first checks to see if the mean has already been calculated.
# If so, it gets the mean from the cache and skips the computation.
# Otherwise, it calculates the mean of the data and sets the value of the mean in the cache via the setmean function
cacheSolve <- function(x, ...) {
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
amatrix$getinverse()
cacheSolve(amatrix)
amatrix$set(matrix(c(0,5,99,66), nrow=2, ncol=2))
cacheSolve(amatrix)
amatrix$get()
amatrix$getinverse()
install.packages(c("digest", "doBy", "ftsa", "gplots", "knitr", "mgcv", "mvtnorm", "pcaPP", "RColorBrewer", "RcppArmadillo", "RCurl", "reshape2", "RSQLite", "timeDate"))
install.packages("RMySQL")
install.packages("RMySQL",type="sorce")
install.packages("RMySQL",type="source")
library(RMySQL)
install.packages("RMySQL")
install.packages("RMySQL")
install.packages("RMySQL",type="source")
cd <to path where file RMySQL_0.9-3.tgz exists>
R CMD INSTALL RMySQL_0.9-3.tgz --with-mysql-inc=/usr/local/mysql/include --with-mysql-lib=/usr/local/mysql/lib
export PKG_CPPFLAGS="-I<MySQL-include-dir>"
export PKG_LIBS="-L<MySQL-lib-dir> -lmysqlclient"
?installpackages
?install-packages
?install.packages
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
created<-h5createFile(example.h5)
created<-h5createFile("example.h5")
created
created<-h5createGroup("example.h5","foo")
created<-h5createGroup("example.h5","baa")
created<-h5createGroup("example.h5","foo/foobaa")
h5ls("example.h")
h5ls("example.h5")
A<-matrix(1:10,nr=5,nc=2)
h5write(A,"example.h5","foo/A")
A=matrix(1:10,nr=5,nc=2)
h5write(A,"example.h5","foo/A")
B=array(seq(0.1,2.0,by=0.1),dim=c(5,2,2))
View(A)
attr(B,"scale")<-"liter"
h5write(B,"example.h5","foo/foobaa/B")
h5ls("example.h5")
df=data.frame(1L:5L,seq(0,1,length.out=5)),
df=data.frame(1L:5L,seq(0,1,length.out=5),c("ab","cde","fghi","a","s"),stringsAsFactors=F)
h5write(df,"example.h5","df")
h5ls("example.h5")
readA=h5read("example.h5","foo/A")
readB=h5read("example.h5","foo/foobaa/B")
readdf=h5read("example.h5","df")
readA
h5write(c(12,13,14),"example.h5","foo/A",index=list(1:3,1))
h5read("example.h5","foo/A")
con<-url("http://schoolar.google.com/citations?user=HI-I6C0AAAAJ&hl=en")
con
htmlCode=readLines(con)
con<-url("http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en")
htmlCode=readLines(con)
con<-url("http://scholar.google.com/citations?hl=es&user=XESiWzMAAAAJ&view_op=list_works&pagesize=100")
htmlCode=readLines(con)
con<-url("http://scholar.google.com/citations?user=XESiWzMAAAAJ&hl=es&authuser=1&oi=ao")
htmlCode=readLines(con)
con<-url("http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en")
htmlCode=readLines(con)
close(con)
htmlCode
library(XML)
url<-"http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
html<-htmlTreeParse(url,useInternalNodes=T)
xpathSApply(html,"//title",xmlValue)
xpathSApply(html,"//td[@id='col-citedby']",xmlValue)
library(httr)
html2=GET(url)
content2=content(html2,as="text")
xpathSApply(parsedHtml,"//tittle",xmlValue)
xpathSApply(parsedHtml,"//title",xmlValue)
parsedHtml=HtmlParse(content2,asText=T)
parsedHtml=htmlParse(content2,asText=T)
xpathSApply(parsedHtml,"//title",xmlValue)
pg1=GET("http://httpbin.org/basic-auth/user/passwd")
pg1
pg1=GET("http://httpbin.org/basic-auth/user/passwd"),authenticate("user","passwd")
pg1=GET("http://httpbin.org/basic-auth/user/passwd",authenticate("user","passwd"))
pg1=GET("http://httpbin.org/basic-auth/user/passwd")
pg2=GET("http://httpbin.org/basic-auth/user/passwd",authenticate("user","passwd"))
pg2
names(pg2)
oauth_endpoints("github")
myapp <- oauth_app("github", "5332fb541da1bdff8132414fdeaa637bf2f86184")
myapp <- oauth_app("github", "09c5e050ec905052c752")
myapp <- oauth_app("github", "5332fb541da1bdff8132414fdeaa637bf2f86184")
q)
q()
library(caret);library(kernlab);data(spam)
inTrain<-createDataPartition(y=spam$type,
p=0.75,list=FALSE)
training<-spam[inTrain,]
testing<-spam[-inTrain,]
modelFit<-train(type~.,data=training,method="glm")
warnings()
args(train.default)
args(trainControl)
set.seed(1235)
modelFit2<-train(type~.,data=training,method="glm")
modelFit2
set.seed(1235)
modelFit3<-train(type~.,data=training,method="glm")
modelFit3
install.packages("ISLR")
library(ISLR);library(ggplot2);library(caret)
data(Wage)
summary(Wage)
inTrain<-createDataPartition(y=Wage$wage,p=0.7,list=FALSE)
training<-Wage[inTrain,]
testing<-Wage[-inTrain,]
dim(training);dim(testing)
featurePlot(x=training[,c("age","education","jobclass")],y=training$wage,plot="pairs")
qplot(age,wage,data=training)
qplot(age,wage,color=jobclass,data=training)
qq<.qplot(age,wage,color=education,data=training)
qq+geom-smooth(method="lm",formula=y~x)
qq+geom.smooth(method="lm",formula=y~x)
qq<.qplot(age,wage,color=education,data=training)
qq+geom_smooth(method="lm",formula=y~x)
qq<-qplot(age,wage,color=education,data=training)
qq+geom_smooth(method="lm",formula=y~x)
library(Hmisc)
cut2(training$wage,g = 3)
table(cutWage)
cutWage<-cut2(training$wage,g = 3)
table(cutWage)
p1<-qplot(cutWage,age,data=training,fill=cutWage,geom=c("boxplot"))
p1
p2<-qplot(cutWage,age,data=training,fill=cutWage,geom=c("boxplot","jitter"))
grid.arrange(p1,p2,ncol=2)
p2
?grid.arrange
??grid.arrange
install.packages("gridExtra")
library(gridExtra)
grid.arrange(p1,p2,ncol=2)
t1<-table(cutWage,training$jobclass)
t1
prop.table(t1,1)
qplot(wage,color=education,data=training,geom="density")
library(caret);library(kernlab);data(spam)
inTrain<-createDataPartition(y = spam$type,p = 0.75,list = FALSE)
training<-spam[inTrain,]
testing<-spam[-inTrain,]
hist(training$capitalAve,main="",xlab="ave. capital run length")
mean(training$capitalAve)
sd(training$capitalAve)
trainCapAve<-training$capitalAve
trainCapAveS<-(trainCapAve-mean(trainCapAve)/sd(trainCapAve)
trainCapAveS<-(trainCapAve-mean(trainCapAve))/sd(trainCapAve)
mean(trainCapAveS)
mean(trainCapAveS)
sd(trainCapAveS)
testCapAve<-testing$capitalAve
testCapAveS<-(testCapAve-mean(trainCapAve))/sd(trainCapAve)
mean(testCapAveS)
sd(testCapAveS)
preObj<-preProcess(training[,-58],method=c("center","scale"))
trainCapAveS<-predict(preObj,training[,-58])$capitalAve
mean(trainCapAveS)
sd(trainCapAveS)
testCapAveS<-predict(preObj,testing[,-58])$capitalAve
mean(testCapAveS)
testCapAveS
sd(testCapAveS)
set.seed(32343)
modelFit<-train(type~.,data=training,preProcess=c("center","scale"),method="glm")
modelFit
preObj<-preProcess(training[,-58],method=c("BoxCox"))
trainCapAveS<-predict(preObj,training[,-58])$capitalAve
par(mfrow=c(1,2));hist(trainCapAveS);qqnorm(trainCapAveS)
source('~/.active-rstudio-document', echo=TRUE)
modFit<-train(classe~.-X,method = "gbm",data=training,verbose=FALSE)
warnings()
?read.table
names(training)
names(testing)
unique(training$problem_id)
unique(testing$problem_id)
unique(testing$X)
training<-training[,-1]
names(training)
testing<-testing[,-c(1,160)]
names(testing)
training<-read.csv("training.csv")
training<-training[,-1]
testing<-read.csv("testing.csv")
testing<-testing[,-c(1,160)]
library(caret);library(ggplot2)
#featurePlot(x = training,y = training$classe,plot = "pairs")
modFit1<-train(classe~.-X,method = "gbm",data=training,verbose=FALSE)
modFit2<-train(classe~.-X,method = "rf",data=training)
predict(modFit1,testing)
predict(modFit2,testing)
modFit1<-train(classe~.,method = "gbm",data=training,verbose=FALSE)
modFit2<-train(classe~.,method = "rf",data=training)
predict(modFit1,testing)
predict(modFit2,testing)
modFit1
modFit1$finalModel
modFit2$finalModel
predict(modFit1$finalModel,testing)
predict(modFit1$,testing)
predict(modFit1,testing)
warnings()
predict(modFit1,newdata=testing)
names(training)
names(testing)
all.equal(names(training),names(testing))
class(training$kurtosis_roll_belt)
class(testing$kurtosis_roll_belt)
unique(training$kurtosis_roll_belt)
unique(testing$kurtosis_roll_belt)
modFit3<-train(classe~.-c(‘kurtosis_roll_belt’, ‘kurtosis_picth_belt’, ‘kurtosis_yaw_belt’, ‘skewness_roll_belt’, ‘skewness_roll_belt.1’, ‘skewness_yaw_belt’, ‘max_roll_belt’, ‘max_picth_belt’, ‘max_yaw_belt’, ‘min_roll_belt’, ‘min_pitch_belt’, ‘min_yaw_belt’, ‘amplitude_roll_belt’, ‘amplitude_pitch_belt’, ‘amplitude_yaw_belt’, ‘var_total_accel_belt’, ‘avg_roll_belt’, ‘stddev_roll_belt’, ‘var_roll_belt’, ‘avg_pitch_belt’, ‘stddev_pitch_belt’, ‘var_pitch_belt’, ‘avg_yaw_belt’, ‘stddev_yaw_belt’, ‘var_yaw_belt’, ‘var_accel_arm’, ‘avg_roll_arm’, ‘stddev_roll_arm’, ‘var_roll_arm’, ‘avg_pitch_arm’, ‘stddev_pitch_arm’, ‘var_pitch_arm’, ‘avg_yaw_arm’, ‘stddev_yaw_arm’, ‘var_yaw_arm’, ‘kurtosis_roll_arm’, ‘kurtosis_picth_arm’, ‘kurtosis_yaw_arm’, ‘skewness_roll_arm’, ‘skewness_pitch_arm’, ‘skewness_yaw_arm’, ‘max_roll_arm’, ‘max_picth’),method = "gbm",data=training,verbose=FALSE)
summary(testing)
modFit3<-train(classe~.-c("kurtosis_roll_belt","kurtosis_picth_belt","kurtosis_yaw_belt","kurtosis_yaw_forearm","skewness_roll_forearm","skewness_pitch_forearm","skewness_yaw_forearm","max_roll_forearm","max_picth_forearm","max_yaw_forearm","min_roll_forearm","min_pitch_forearm","min_yaw_forearm","amplitude_roll_forearm","amplitude_pitch_forearm","amplitude_yaw_forearm","var_accel_forearm","avg_roll_forearm","stddev_roll_forearm","var_roll_forearm","avg_pitch_forearm","stddev_pitch_forearm","var_pitch_forearm","avg_yaw_forearm","stddev_yaw_forearm","var_yaw_forearm"),method = "gbm",data=training,verbose=FALSE)
trainTidy<-training[,-c("kurtosis_roll_belt","kurtosis_picth_belt","kurtosis_yaw_belt","kurtosis_yaw_forearm","skewness_roll_forearm","skewness_pitch_forearm","skewness_yaw_forearm","max_roll_forearm","max_picth_forearm","max_yaw_forearm","min_roll_forearm","min_pitch_forearm","min_yaw_forearm","amplitude_roll_forearm","amplitude_pitch_forearm","amplitude_yaw_forearm","var_accel_forearm","avg_roll_forearm","stddev_roll_forearm","var_roll_forearm","avg_pitch_forearm","stddev_pitch_forearm","var_pitch_forearm","avg_yaw_forearm","stddev_yaw_forearm","var_yaw_forearm")]
trainTidy<-training[,-("kurtosis_roll_belt","kurtosis_picth_belt","kurtosis_yaw_belt","kurtosis_yaw_forearm","skewness_roll_forearm","skewness_pitch_forearm","skewness_yaw_forearm","max_roll_forearm","max_picth_forearm","max_yaw_forearm","min_roll_forearm","min_pitch_forearm","min_yaw_forearm","amplitude_roll_forearm","amplitude_pitch_forearm","amplitude_yaw_forearm","var_accel_forearm","avg_roll_forearm","stddev_roll_forearm","var_roll_forearm","avg_pitch_forearm","stddev_pitch_forearm","var_pitch_forearm","avg_yaw_forearm","stddev_yaw_forearm","var_yaw_forearm")]
testTidy<-testing[,-c("kurtosis_roll_belt","kurtosis_picth_belt","kurtosis_yaw_belt","kurtosis_yaw_forearm","skewness_roll_forearm","skewness_pitch_forearm","skewness_yaw_forearm","max_roll_forearm","max_picth_forearm","max_yaw_forearm","min_roll_forearm","min_pitch_forearm","min_yaw_forearm","amplitude_roll_forearm","amplitude_pitch_forearm","amplitude_yaw_forearm","var_accel_forearm","avg_roll_forearm","stddev_roll_forearm","var_roll_forearm","avg_pitch_forearm","stddev_pitch_forearm","var_pitch_forearm","avg_yaw_forearm","stddev_yaw_forearm","var_yaw_forearm")]
trainTidy<-training[-("kurtosis_roll_belt","kurtosis_picth_belt","kurtosis_yaw_belt","kurtosis_yaw_forearm","skewness_roll_forearm","skewness_pitch_forearm","skewness_yaw_forearm","max_roll_forearm","max_picth_forearm","max_yaw_forearm","min_roll_forearm","min_pitch_forearm","min_yaw_forearm","amplitude_roll_forearm","amplitude_pitch_forearm","amplitude_yaw_forearm","var_accel_forearm","avg_roll_forearm","stddev_roll_forearm","var_roll_forearm","avg_pitch_forearm","stddev_pitch_forearm","var_pitch_forearm","avg_yaw_forearm","stddev_yaw_forearm","var_yaw_forearm")]
trainTidy<-training[-c("kurtosis_roll_belt","kurtosis_picth_belt","kurtosis_yaw_belt","kurtosis_yaw_forearm","skewness_roll_forearm","skewness_pitch_forearm","skewness_yaw_forearm","max_roll_forearm","max_picth_forearm","max_yaw_forearm","min_roll_forearm","min_pitch_forearm","min_yaw_forearm","amplitude_roll_forearm","amplitude_pitch_forearm","amplitude_yaw_forearm","var_accel_forearm","avg_roll_forearm","stddev_roll_forearm","var_roll_forearm","avg_pitch_forearm","stddev_pitch_forearm","var_pitch_forearm","avg_yaw_forearm","stddev_yaw_forearm","var_yaw_forearm")]
names(testing)
zeroVar<-c("kurtosis_roll_belt","kurtosis_picth_belt","kurtosis_yaw_belt","kurtosis_yaw_forearm","skewness_roll_forearm","skewness_pitch_forearm","skewness_yaw_forearm","max_roll_forearm","max_picth_forearm","max_yaw_forearm","min_roll_forearm","min_pitch_forearm","min_yaw_forearm","amplitude_roll_forearm","amplitude_pitch_forearm","amplitude_yaw_forearm","var_accel_forearm","avg_roll_forearm","stddev_roll_forearm","var_roll_forearm","avg_pitch_forearm","stddev_pitch_forearm","var_pitch_forearm","avg_yaw_forearm","stddev_yaw_forearm","var_yaw_forearm")
zeroVar
testTidy<-testing[,-zeroVar]
testTidy<-testing[,-"kurtosis_roll_belt"]
testTidy<-testing[,"kurtosis_roll_belt"]
head(testTidy)
names(testTidy)
testTidy<-testing["kurtosis_roll_belt"]
testTidy<-testing[,"kurtosis_roll_belt"]
testTidy<-testing["kurtosis_roll_belt"]
names(testTidy)
testTidy<-testing[-"kurtosis_roll_belt"]
testTidy<-testing[-("kurtosis_roll_belt")]
testTidy<-testing[-c("kurtosis_roll_belt")]
names(testing)-zeroVar
testTidy<-testing[,-"kurtosis_roll_belt"]
testTidy<-testing[!"kurtosis_roll_belt"]
testTidy<-testing[,!"kurtosis_roll_belt"]
testTidy<-testing[!("kurtosis_roll_belt")]
testTidy<-testing[-2]
testTidy<-testing[-c(2,7,8)]
which(names(testing)==zeroVar)
merge(names(testing),zeroVar,all = FALSE)
merge(zeroVar,names(testing))
merge(zeroVar,names(testing),all=FALSE)
names(testing)
testTidy<-testing[-c(11:13,127:138,140:149)]
trainTidy<-training[-c(11:13,127:138,140:149)]
testTidy<-testing[-c(11:13,127:138,140:149)]
modFit3<-train(classe~.,method = "gbm",data=trainTidy,verbose=FALSE)
summary(trainTidy)
training<-read.csv("training.csv",na.strings=c("","#DIV/0!"))
trainTidy<-training[-c(11:13,127:138,140:149)]
summary(trainTidy)
summary(testTidy)
testTidy<-testing[-c(11:13,127:138,140:149)]
summary(testTidy)
names(testing)
str(testing)
testing<-read.csv("testing.csv")
summary(testTidy)
summary(testing)
names(testing)
testing<-testing[,-c(1,160)]
names(testing)
trainTidy<-training[-c(11:35,49:58,68:82,86:100,102:111,124:138,140:149)]
testTidy<-testing[-c(11:35,49:58,68:82,86:100,102:111,124:138,140:149)]
summary(testing)
summary(testTidy)
summary(trainTidy)
training<-read.csv("training.csv",na.strings=c("","#DIV/0!"))
training<-training[,-1]
testing<-read.csv("testing.csv")
testing<-testing[,-c(1,160)]
trainTidy<-training[-c(11:35,49:58,68:82,86:100,102:111,124:138,140:149)]
testTidy<-testing[-c(11:35,49:58,68:82,86:100,102:111,124:138,140:149)]
summary(trainTidy)
summary(testTidy)
modFit3<-train(classe~.,method = "gbm",data=trainTidy,verbose=FALSE)
modFit3
predict(modFit3,testTidy)
summary(modFit3)
qplot(training$raw_timestamp_part_1,col=training$classe)
class(raw_timestamp_part_1)
class(training$raw_timestamp_part_1)
qplot(training$raw_timestamp_part_1,color=training$classe)
plot(training$raw_timestamp_part_1,color=training$classe)
summary(modFit3$finalModel)
qplot(training$classe,training$raw_timestamp_part_1,color)
boxplot(training$classe,training$raw_timestamp_part_1,color)
boxplot(training$classe,training$raw_timestamp_part_1)
boxplot(training$raw_timestamp_part_1,bycluster = training$classe)
modGit3$finalModel
modFit3$finalModel
qplot(roll_belt,data=training)
qplot(classe,roll_belt,data=training)
qplot(classe,raw_timestamp_part_1,data=training)
qplot(classe,roll_belt,data=training,geom = "boxplot")
qplot(classe,raw_timestamp_part_1,data=training,geom = "boxplot")
qplot(classe,num_window,data=training,geom = "boxplot")
qplot(classe,pitch_forearm,data=training,geom = "boxplot")
qplot(classe,magnet_dumbbell_z,data=training,geom = "boxplot")
inTrain<-createDataPartition(y=trainTidy$classe,p = 0.7,list = FALSE)
train<-trainTidy[inTrain,]
crossVal<-trainTidy[-inTrain,]
modFit1<-train(classe~.,method = "gbm",data=train,verbose=FALSE)
predCross<-predict(modFit1,crossVal)
table(predCross,crossVal$classe)
predCross<-predict(modFit3,crossVal)
table(predCross,crossVal$classe)
modFit1<-train(classe~.,method = "gbm",data=train,verbose=FALSE)
predCross<-predict(modFit1,crossVal)
table(predCross,crossVal$classe)
predict(modFit1,testTidy)
mean(predCross==crossVal$classe)
